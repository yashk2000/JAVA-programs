public class Driver {

	public static void main(String args[]) {
		LinkedList L1 = new LinkedList();
		L1.InsertAtHead(6);
		L1.InsertEnd(2);
		L1.Insert(1, 3);
		L1.InsertEnd(66);
		L1.InsertEnd(90);
		L1.Traversal();
		System.out.println("\nDelete at the head executed ");
		L1.DeleteHead();
		L1.Traversal();
		L1.DeleteTail();
		System.out.println("\nDelete at the tail executed");
		L1.Traversal();
		System.out.println("\nDelete at the k executed ");
		L1.Delete(2);
		L1.Traversal();
		L1.Insert(2, 2);
		System.out.println("\nNew linked list");
		L1.Traversal();
		L1.FindMiddle();
		LinkedList L2 = new LinkedList();
		L2.InsertAtHead(61);
		L2.InsertEnd(89);
		L2.Insert(1, 8);
		L2.InsertEnd(5);
		L2.InsertEnd(0);
		System.out.println("\nNew linked list ");
		L2.Traversal();
		L2.Sort();
		System.out.println("\nSorted list ");
		L2.Traversal();
		System.out.println("\nL1 Before Merge ");
		L1.Traversal();
		System.out.println("\nL2 Before Merge");
		L2.Traversal();
		LinkedList L3 = new LinkedList();
		L3.Sort(L1, L2);
		System.out.println("\nAfter Merge ");
		L3.Traversal();
		L3.InsertSorted(78);
		System.out.println("\nInsert 10 in sorted list ");
		L3.Traversal();
		System.out.println("\nRemove Duplicate ");
		L3.Duplicate();
		L3.Traversal();
		L3.Rotate(2);
		System.out.println("\nAfter rotating ");
		L3.Traversal();
		L3.Reverse();
		System.out.println("\nAfter reversing");
		L3.Traversal();
		LinkedList L4 = new LinkedList();
		L4.Union(L1, L2);
		System.out.println("\nUnion of ");
		L1.Traversal();
		System.out.println("\nand  ");
		L2.Traversal();
		System.out.println("\nis");
		L4.Traversal();
		L4 = L4.Intersection(L1, L2);
		System.out.println("\nIntersection of ");
		L1.Traversal();
		System.out.println("\nand  ");
		L2.Traversal();
		System.out.println("\nis");
		L4.Traversal();
		System.out.println("\nImplementing Partion for ");
		L2.Rotate(2);
		L2.Traversal();
		System.out.println("\nwith pivot 13 ");
		L3 = L3.Partition(L2, 61);
		L3.Traversal();
	}
}
